# 지난 수업 복습
# 리터널 : 자연수 (정수 실수) / 자연어 (문자열, 문자)

# 숫자 연산자 : +, -, *, /, //, %, **

# 문자 연산자 : +, *

# indexing, slicing
# 포맷팅 : 포맷 문자를 이용한 포맷팅
#         format() 함수를 이용한 포맷팅
#         f 문자를 이용한 포맷팅

# 문자열 함수 : 문자열 가공
# count(), len(), index(), rindex(), find(), rfind(), lower(), upper(), strip(), rsrip(), lstip(), replace(), split(),

# 변수는 하나의 하나만 사용이 가능하기에 다섯개의 변수를 가지고 싶으면 다섯개를 생성해야 함
# 다섯개를 다 만들기는 귀찮으니 변수 하나를 가지고 다섯개의 값을 가지고 싶을 때 "리스트" 라는 자료형 사용

str1 = "Life is too short"
result = str1.split()  # ['Life', 'is', 'too', 'short']
print(result)

a1 = [10, 20, 30]  # 하나의 변수에 여러개의 값을 저장하기 위해서 만든 자료형이 리스트
#     0, 1, 2 : index
print(a1[2])
print(a1[0])
a1[0] = 100  # 리스트는 요소에 있는 index 를 이용해서 요소값을 변경 가능
print(a1)  # [100, 20, 30]

# 숫자 : 10, 10.5
# 문자, 문자열 : "a" , 'a', """a""" , '''a''' / 따옴표 없이 문자만 있는 건 "변수"
# 리스트 : [] 대괄호로 표기되어있으면 무조건 리스트!
#        : 여러개의 값을 가질 수 있는 자료형
#        : 여러가지의 유형을 저장할 수 있다.

a1 = []  # 빈리스트
a1 = [1, 2, 3, 4]  # 정수형 리스트
a1 = ['나', '나누리', 'python']  # 문자열 리스트
a1 = [1, 2, '나누리', 10, 5]  # 혼합형 리스트
a1 = [1, 2, 3, '나누리', [4, 5, 6, 7]]  # 리스트를 포함한 혼합형 리스트
a1 = [[1, 2, 3, 4], [5, 6, 7, 8]]  # 리스트를 포함한 리스트

a1 = [1, 2, 3, 4, 5, 6]
#     0,1,2,3,4,5
str1 = 'Life is too short'
#       01234567890123456 : index
print(str1[0])
print(a1[3])
result = str1.split()
print(result)  # ['Life', 'is', 'too', 'short']
print(result[1])  # is

# 리스트가 포함되어있는 혼합형 리스트
a12 = [1, 2, 3, 'Life', 'is', [1, 2], [1], 0.5, "30"]
#      0  1  2     3      4     5      6    7     8
# indexing 을 하면 본연의 자료형으로 출력 [] 괄호까지 포함 되어서
print(a12[0])  # 1
print(a12[6])  # [1]
print(a12[5])  # [1,2]
print(a12[3])  # Life
print(a12[7])  # 0.5

print(a12[0] + a12[1])
print(a12[2] + a12[7])
print(a12[2] + int(a12[8]))  # index 8 번 문자열을 정수형으로 변환
print(str(a12[2]) + a12[8])  # index 2 번 정수형을 문자형으로 변환


######################## 치과 다녀옴 이따가 다시 보기 ############################

# 리스트 함수
# 리스트에 요소 추가
# append

l1 = ['Life', 'is']
# 요소 'is' 뒤에 'too' 를 추가 ['Life', 'is', 'too']
print(l1 + ['too'])
print(l1)

l1.append('too')
print(l1)
l1.append('short')
print(l1)
l1.append(3)
print(l1)

# 원하는 위치에 요소 삽입하기
# 내가 원하는 위치에 값을 지정 해주면 원래 위치에 있던 값은 하나씩 뒤로 밀림
l1 = ['Life', 'short']
#       0        1
l1.insert(1, 'is')
print(l1)  # ['Life', 'is', 'short']

l1.insert(2, 'too')
print(l1)  # ['Life', 'is', 'too', 'short']


# 리스트를 확장
print([1, 2, 3] + [4, 5, 6])
a = [1, 2, 3]
l1.extend(a)
print(l1)  # ['Life', 'is', 'too', 'short', 1, 2, 3]

# 요소 삭제
l1 = ['Life', 'is', 'too', 'short', 1, 2, 3]
#        0      1     2       3     4  5  6
del l1[4]
print(l1)  # ['Life', 'is', 'too', 'short', 2, 3]

# slicing 을 이용해서 삭제
print(l1[2:2+2])
del l1[2:2+2]
print(l1)

# 요소를 이용해서 삭제
l1 = ['Life', 'is', 'too', 'short', 1, 2, 3]
l1.remove('short')
print(l1)
l1.remove('is')
print(l1)

l2 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = l2.pop(6)
print(result)
print(l2)

l1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
#     0  1  2  3  4  5  6  7  8
print(l1[:5])  # 처음부터 5개를 가져오기
print(l1[4:4+5])  # 마지막에 다섯개가 남았다는 걸 알았을 때 쓸 수 있음
print(l1[4:])
print(len(l1))
print(l1[4:len(l1)])

# 정렬 -- 오름차순 / 내림차순
l = [4, 2, 3, 5, 1]
# 숫자 오름차순
l.sort()
print(l)
# 숫자 내림차순
l.sort(reverse=True)
print(l)

# 문자 오름차순
l = ['b', 'a', 'c']
l.sort()
print(l)
# 문자 내림차순
l.sort(reverse=True)
print(l)

##### 문자열과 숫자가 혼합된 리스트는 정렬 불가 #####


# 리터널 자료형 : 자연수 (정수, 실수)
#                 자연어 (문자, 문자열)
#                 부울 (True / False)

# 리스트 : [], [1], [10.5], [1,2,'a']
# 튜플 : (), (1,) (10.5), [1,2,'a']

l = []
print(l)
t = ()
print(t)
print(1)  # 1
print([1])  # 리스트
print((3 + 5) * 2)  # 여기서 () 는 최우선 연산자
print((1))  # 여기도 튜플로 나오지 않고 최우선 연산차로 출력 됨

# 튜플로 출력 하려면 콤마를 찍어주기로 함
print((1,))  # 요소가 하나인 경우
print((1, 2))  # 요소가 두개 이상인 경우는 콤마를 안 찍어도 튜플로 출력 됨
print(('나', '누리'))  # 문자열 튜플
print(('나', '누리', 1, 2))  # 혼합형 튜플

t = ((1, 2), (3, 4))  # 튜플을 포함한 튜플
print(t)
t = ('나', '누리', 1, 2, (3, 4))  # 튜플을 포함한 혼합형 튜플
print(t)
t = ('나', '누리', 1, 2, (3, 4), [4, 5, 6])  # 리스트를 포함한 혼합형 튜플
print(t)

l = [1, 2, '나', '누리', [3, 4], (5, 6)]  # 리스트와 튜플을 포함한 혼합형 리스트
print(l)

t = (1, 2, 3, 4, 5, 6)
print(t)
t = 1, 2, 3, 4, 5, 6  # 괄호를 하지 않아도 튜플이 됨
print(t)

# 튜플을 써야 하는 이유
l = [1, 2, 3, 4, 3]  # indexing, slicing
t = (1, 2, 3, 4, 3)
#    0  1  2  3  4
print(l[0])
print(t[0])
print(l[2:])
print(t[2:])
print(l[1:1+2])  # 1번하고 2글자 가져와라
print(t[1:1+2])  # 1번하고 2글자 가져와라

# 리스트와 튶플의 차이
# 리스트는 요소의 값을 변경할 수 있지만,
# 튜플은 요소의 값을 변경할 수 없다.
# 데이터를 상수화하기 위해서 사용 (데이터가 변경되지 않게)
l[2] = 10
print(l)  # [1, 2, 10, 4, 3]
